// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/weaveworks/eksctl/pkg/actions/iam"
	"github.com/weaveworks/eksctl/pkg/apis/eksctl.io/v1alpha5"
	"github.com/weaveworks/eksctl/pkg/cfn/manager"
	iamoidc "github.com/weaveworks/eksctl/pkg/iam/oidc"
)

type FakeStackManager struct {
	CreateIAMServiceAccountStub        func(chan error, *v1alpha5.ClusterIAMServiceAccount, *iamoidc.OpenIDConnectManager) error
	createIAMServiceAccountMutex       sync.RWMutex
	createIAMServiceAccountArgsForCall []struct {
		arg1 chan error
		arg2 *v1alpha5.ClusterIAMServiceAccount
		arg3 *iamoidc.OpenIDConnectManager
	}
	createIAMServiceAccountReturns struct {
		result1 error
	}
	createIAMServiceAccountReturnsOnCall map[int]struct {
		result1 error
	}
	ListStacksMatchingStub        func(string, ...string) ([]*cloudformation.Stack, error)
	listStacksMatchingMutex       sync.RWMutex
	listStacksMatchingArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	listStacksMatchingReturns struct {
		result1 []*cloudformation.Stack
		result2 error
	}
	listStacksMatchingReturnsOnCall map[int]struct {
		result1 []*cloudformation.Stack
		result2 error
	}
	UpdateStackStub        func(string, string, string, manager.TemplateData, map[string]string) error
	updateStackMutex       sync.RWMutex
	updateStackArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 manager.TemplateData
		arg5 map[string]string
	}
	updateStackReturns struct {
		result1 error
	}
	updateStackReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStackManager) CreateIAMServiceAccount(arg1 chan error, arg2 *v1alpha5.ClusterIAMServiceAccount, arg3 *iamoidc.OpenIDConnectManager) error {
	fake.createIAMServiceAccountMutex.Lock()
	ret, specificReturn := fake.createIAMServiceAccountReturnsOnCall[len(fake.createIAMServiceAccountArgsForCall)]
	fake.createIAMServiceAccountArgsForCall = append(fake.createIAMServiceAccountArgsForCall, struct {
		arg1 chan error
		arg2 *v1alpha5.ClusterIAMServiceAccount
		arg3 *iamoidc.OpenIDConnectManager
	}{arg1, arg2, arg3})
	stub := fake.CreateIAMServiceAccountStub
	fakeReturns := fake.createIAMServiceAccountReturns
	fake.recordInvocation("CreateIAMServiceAccount", []interface{}{arg1, arg2, arg3})
	fake.createIAMServiceAccountMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStackManager) CreateIAMServiceAccountCallCount() int {
	fake.createIAMServiceAccountMutex.RLock()
	defer fake.createIAMServiceAccountMutex.RUnlock()
	return len(fake.createIAMServiceAccountArgsForCall)
}

func (fake *FakeStackManager) CreateIAMServiceAccountCalls(stub func(chan error, *v1alpha5.ClusterIAMServiceAccount, *iamoidc.OpenIDConnectManager) error) {
	fake.createIAMServiceAccountMutex.Lock()
	defer fake.createIAMServiceAccountMutex.Unlock()
	fake.CreateIAMServiceAccountStub = stub
}

func (fake *FakeStackManager) CreateIAMServiceAccountArgsForCall(i int) (chan error, *v1alpha5.ClusterIAMServiceAccount, *iamoidc.OpenIDConnectManager) {
	fake.createIAMServiceAccountMutex.RLock()
	defer fake.createIAMServiceAccountMutex.RUnlock()
	argsForCall := fake.createIAMServiceAccountArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStackManager) CreateIAMServiceAccountReturns(result1 error) {
	fake.createIAMServiceAccountMutex.Lock()
	defer fake.createIAMServiceAccountMutex.Unlock()
	fake.CreateIAMServiceAccountStub = nil
	fake.createIAMServiceAccountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackManager) CreateIAMServiceAccountReturnsOnCall(i int, result1 error) {
	fake.createIAMServiceAccountMutex.Lock()
	defer fake.createIAMServiceAccountMutex.Unlock()
	fake.CreateIAMServiceAccountStub = nil
	if fake.createIAMServiceAccountReturnsOnCall == nil {
		fake.createIAMServiceAccountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createIAMServiceAccountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackManager) ListStacksMatching(arg1 string, arg2 ...string) ([]*cloudformation.Stack, error) {
	fake.listStacksMatchingMutex.Lock()
	ret, specificReturn := fake.listStacksMatchingReturnsOnCall[len(fake.listStacksMatchingArgsForCall)]
	fake.listStacksMatchingArgsForCall = append(fake.listStacksMatchingArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.ListStacksMatchingStub
	fakeReturns := fake.listStacksMatchingReturns
	fake.recordInvocation("ListStacksMatching", []interface{}{arg1, arg2})
	fake.listStacksMatchingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStackManager) ListStacksMatchingCallCount() int {
	fake.listStacksMatchingMutex.RLock()
	defer fake.listStacksMatchingMutex.RUnlock()
	return len(fake.listStacksMatchingArgsForCall)
}

func (fake *FakeStackManager) ListStacksMatchingCalls(stub func(string, ...string) ([]*cloudformation.Stack, error)) {
	fake.listStacksMatchingMutex.Lock()
	defer fake.listStacksMatchingMutex.Unlock()
	fake.ListStacksMatchingStub = stub
}

func (fake *FakeStackManager) ListStacksMatchingArgsForCall(i int) (string, []string) {
	fake.listStacksMatchingMutex.RLock()
	defer fake.listStacksMatchingMutex.RUnlock()
	argsForCall := fake.listStacksMatchingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStackManager) ListStacksMatchingReturns(result1 []*cloudformation.Stack, result2 error) {
	fake.listStacksMatchingMutex.Lock()
	defer fake.listStacksMatchingMutex.Unlock()
	fake.ListStacksMatchingStub = nil
	fake.listStacksMatchingReturns = struct {
		result1 []*cloudformation.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackManager) ListStacksMatchingReturnsOnCall(i int, result1 []*cloudformation.Stack, result2 error) {
	fake.listStacksMatchingMutex.Lock()
	defer fake.listStacksMatchingMutex.Unlock()
	fake.ListStacksMatchingStub = nil
	if fake.listStacksMatchingReturnsOnCall == nil {
		fake.listStacksMatchingReturnsOnCall = make(map[int]struct {
			result1 []*cloudformation.Stack
			result2 error
		})
	}
	fake.listStacksMatchingReturnsOnCall[i] = struct {
		result1 []*cloudformation.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeStackManager) UpdateStack(arg1 string, arg2 string, arg3 string, arg4 manager.TemplateData, arg5 map[string]string) error {
	fake.updateStackMutex.Lock()
	ret, specificReturn := fake.updateStackReturnsOnCall[len(fake.updateStackArgsForCall)]
	fake.updateStackArgsForCall = append(fake.updateStackArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 manager.TemplateData
		arg5 map[string]string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateStackStub
	fakeReturns := fake.updateStackReturns
	fake.recordInvocation("UpdateStack", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateStackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStackManager) UpdateStackCallCount() int {
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	return len(fake.updateStackArgsForCall)
}

func (fake *FakeStackManager) UpdateStackCalls(stub func(string, string, string, manager.TemplateData, map[string]string) error) {
	fake.updateStackMutex.Lock()
	defer fake.updateStackMutex.Unlock()
	fake.UpdateStackStub = stub
}

func (fake *FakeStackManager) UpdateStackArgsForCall(i int) (string, string, string, manager.TemplateData, map[string]string) {
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	argsForCall := fake.updateStackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeStackManager) UpdateStackReturns(result1 error) {
	fake.updateStackMutex.Lock()
	defer fake.updateStackMutex.Unlock()
	fake.UpdateStackStub = nil
	fake.updateStackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackManager) UpdateStackReturnsOnCall(i int, result1 error) {
	fake.updateStackMutex.Lock()
	defer fake.updateStackMutex.Unlock()
	fake.UpdateStackStub = nil
	if fake.updateStackReturnsOnCall == nil {
		fake.updateStackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateStackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStackManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createIAMServiceAccountMutex.RLock()
	defer fake.createIAMServiceAccountMutex.RUnlock()
	fake.listStacksMatchingMutex.RLock()
	defer fake.listStacksMatchingMutex.RUnlock()
	fake.updateStackMutex.RLock()
	defer fake.updateStackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStackManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iam.StackManager = new(FakeStackManager)
